***자바스크립트***

[ES5 vs ES6]
ES는 ECMA에서 표준승인한 스크립트라는 뜻으로 ECMAScript이며, 자바스크립트는 언어 ES3,4,5,6,7 은 스펙이라한다.
2015년 6월에 ES6가 공식적으로 승인되었다.
ES6는 다양항 새로운 기능들을 제공한다.
-선언 : only var(함수단위) -> let, const (블록단위)
-모듈 : var React = require('react') -> import React from 'react'
-클래스 : function A(); A.prototype.method(); -> class A{ method() }
-상속 : var a = A -> class a extends A
-Fat Arrow Functiom(=>) : function a(n){1+1} -> n=>1+1 *(인자=>함수내용)

[자바스크립트 주의사항]
변수명 중복 : 같은 변수이름이 있으면 에러대신 가까운 녀석을 참조한다.
키워드 생략 : var 없이 선언 가능, 단 전역변수로 인식된다.

[1.클로저]
-독립적인 변수로, 클로저(변수, 함수)안의 함수들은 환경을 기억한다.
-즉 함수가 return해도 그 결과값을 계속 기억하고 있다는 뜻이다.
-var i;
-for (i = 0; i < 10; i++) {
-  setTimeout(function() {
-    console.log(i);
-  }, 100);
-}
-위 같은 경우 10만 10번 출력된다, 0.1초안에 for문이 다 돌기때문. 이때 클로저를 사용한다
var i;
for (i = 0; i < 10; i++) {
  (function(j) {	//클로저
    setTimeout(function() {
      console.log(j);
    }, 100);
  })(i);
}
-j는 선언되어있지 않으므로 에러가 아니라 가까운 변수를 찾는데 i가 들어가게 된다. 그리고 for문이 돌더라도 10개의 각각 다른 환경에 i가 들어가므로 1, 2, 3, 4 등이 각 공간에 할당되어 log로 1,2,3..이 찍힌다
*클로저는 이런 예외상황을 벗어나게 해주며, 정보 은닉 등에도 사용된다.

[2.호이스팅]
-변수를 끌어올린다는 것으로, 선언 이전에 변수를 호출해도 가장 가까운 아래의 변수값을 참조한다. *단, 함수 외 글로벌 변수보다, 함수 내 호이스팅이 우선발생한다.
-호이스팅은 function 함수() 에서만 동작하며, var func = function(){} 같은 형태인 경우 func()를 해도 func내에서 호이스팅이 일어나지 않는다. 함수가 변수처럼 사용되기 때문이다.

[3.프로토타입]
-객체의 원형을 '프로토타입 객체'라 하며 기존 객체를 복사하여 새로운 객체를 생성하는 원리를 가진다.
 보통 new로 생성되면 전부 객체인데, 이 객체들은 내부에 __proto__를 가지고 있고 이녀석은 원형객체(프로토타입)을 가리킨다.
 우리는 __proto__를 '프로토타입' 이라고 부른다.
 각 객체들 내부에 있는 링크들이 각각 프로토타입 객체를 가리킴으로써, OOP가 가능해진다.
 
[JS와 메모리]
다수의 플립플롭으로 구성된 메모리는 바이트 단위로 데이터를 저장한다.
낮은 주소부터, 코드/데이터/힙/스택 영역이 존재한다.
코드는 소스코드, 데이터는 static 및 전역변수, 힙은 동적메모리, 스택은 콜스택으로 호출되거나 매개변수가 임시저장 되는데 쓰인다.
콜스택은 컴파일 시 크기가 결정되는데, JS는 인터프리어어잖아? 크롬과 node.js에서는 그래서 V8엔진을 사용하고 JIT컴파일로 실행되면서 컴파일을 한다.(컴파일과 인터프리터의 중간)
메모리는, 할당->사용->해제 순서로 관리가 되는데 JS에서는 데이터타입같은게 없다. => 그래서, JS는 모든 객체를 Key : Value 형태로 메모리에 저장이 된다.
 결론적으로, 메모리 검색 속도에서 다른 언어들보다 느리다는 단점이 있다.
또한, V8엔진에는 가비지 컬렉터가 있는데 전체 객체중 오래 사용되지 않은 객체를 지우는 다른 언어와는 달리, 마크앤스윕(Mark-and-sweep) 기법을 쓴다
가비짙컬렉터의 알고리즘은 참조횟수에 기반해 있다. 그래서 가장 처음 시작되는 개체부터 시작해서 계속 참조를 타고가면서 참조되지 않는 녀석들을 mark하고 이녀석들의 메모리가 OS에 반환된다.
JS가 느려지는 것은 가비지컬렉팅이 많이 일어나기때문인데. 그럴 땐 객체가 서로 순환참조 되고있는 것은아닌지, 크롬 개발자도구 performance에서 가비지컬렉팅이 불규칙한지 확인해봐야한다.
