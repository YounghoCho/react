***React***
https://velopert.com/3626

[React란]
지속해서 데이터가 변화하는 대규모 애플리케이션을 구축하기 위하여 만들어졌다
Virtual DOM을 사용해 필요한 곳에만 업데이트를 한다. 
 실제 브라우더의 DOM을 다시 렌더링 하는게 아니라, JS로 이뤄진 가상 DOM에 한번 렌더링을 하고, 실제 DOM과 비교한다음 변화가 필요한 곳만 업데이트한다.
JS코드는 {} 안에다가 사용한다.
 예를들어, 주석은 {/*...*/} 혹은 <div //태그사이에 쓸수있다.>

[웹팩 vs 바벨]
웹팩은, 여러 JavaScript 소스를 하나로 묶는 도구
바벨은, ES6/ES7 코드를 ECMAScript5 코드로 transpiling 하기 위한 도구

[플럭스 vs 리덕스]
MVC는 모델과 뷰가 상호간에 데이터 변화를 일으킬 수 있다는 한계가 있다.
그래서 FB에서 만든 디자인패턴이 Flux다.
구성은 네가지 Action, Dispatcher, Model, View(여기선 컨트롤러역할)이며, 단방향이므로 MVC보다 관리가 쉽다
리덕스는 Flux를 더 간단하게 사용할수있는 구현체이다.

[리덕스 원리]
1. onCreate, onChange, onSubmit 등의 사용자 액션이 발생한다
2.액션함수내 액션객체를 dispatch()로 '스토어'에 보낸다.
3.스토어는 리듀서로 만들어지기때문에 리듀서로 가보면, 액션객체 혹은 변한state가 리듀서로 전해진다.
4.리듀서에서는 살제로 액션 객체를 변화시키고 다시 '스토어'로 리턴한다 
5.subscriber는 스토어를 구독하기때문에 state나 action이 변한것을 알고 다시render한다.
6.다만 reactJS에서는 store.subscriber()를 쓰지않습니다. (내react는 setState로 변한것을알려준다)

[JSX]
Javascript XML로, 리액트에서 UI 템플릿을 만들때 사용한다.
0. 태그닫기 : 단일 태그(<input><br>)도 무조건 닫아줘야 에러가 없다. <button/><br/> 
1. 복합태그 : 여러 Element를 렌더링 할때는 무조건 하나의 엘리먼트로 감싸져있어야 한다. 단 div로 감싸는게 혼란스러우면 <Fragment></Fragment>를 사용한다.
2. JS사용 : JSX에서 JS사용할때는 태그사이에 { }만 넣어주면 된다. let value = 1; <h1>{value}</h1>
3. 메소드 : say(){ } render(){ return ( <button onClick={this.say}>);}. 여기서는 JS와 다르게 say()가 아니다. say()라고하면 페이지 로딩시에도 동작하게된다.  
4. IF-else : 사용 불가. 삼항 연산자 { ? : : }, &&연산자 를 대안으로 사용해야함. (if else는 삼항연산자로, if문은 &&연산자로 쓴다). 굳이 if/else/switch를 쓰자면 IIFE를 사용하면 된다.
5. 스타일 : 객체형태로 적용한다. let style={backgroundColor:'red'}; <p style = {style}></p>
6. 컨벤션 : 카멜(낙타) 표기법 사용. 클래스는 대문자로시작, 나머지는 소문자로 시작, 복합어는 연결부분에서 대문자로, 메소드는 소문자로

[JSX 조건문]
1. if -> {1 + 1 === 2 && (<div>yes</div>)}
2. if else -> { a==b ? A : B }
3. IIFE => { (function(){ if (a==1) return (<div></div>)})() } 
   마지막에()가 붙는것까지가 IIFE의 형식이며 이곳에 매개변수를 넣어 익명함수에 전달할 수 있다.

[컴포넌트]
컴포넌트는 props와 state로 구성되는데, props는 부모 자식 간 주고받는 값이며, state는 컴포넌트 내에서 사용된다.
컴포넌트를 만들면, 다른곳에서 import하고 컴포넌트 이름을 태그처럼 사용할 수 있다.
1. setState
 this.setState로 state 객체의 값들을 변경한다.
 this.setState가 호출되어야 컴포넌트가 다시 렌더링된다
 단, 객체 안의 객체까지는 접근할 수 없어서 state객체의 바꾸지 않아도 되는 부분도 다 작성해서, state객체를 "재작성" 해야한다.
2. 이벤트
 JS랑 다르게 카멜표기법을 따른다
3. LifeCycle API
컴포넌트가 브라우저에 나타나서 사라지는 과정 까지에서 리액트에서 자체적으로 호출되는 API들을 말한다.
4. 메소드
 메소드 생성시 handle(){ this.setState({})를 쓰게되면 나중에 이벤트가 발생했을때 이벤트가 함수로 전달되는 과정에서 "this"가 끊겨 this가 undefined가 된다.
 화살표 함수 형태로 작성해서 해결한다. handle = () => {this.setState({})}

[컨테이너 컴포넌트]
리덕스와 연동된 컴포넌트를 컨테이너 컴포넌트라고 한다.
그냥 단순히 props 를 전달해주면 그대로 보여주는 컴포넌트들은 프리젠테이셔널 컴포넌트라고 한다.
-react-redux에서 제공하는 connect 함수로 스토어와 컴포넌트를 연결한다.
-connect(params)(Tag)형태로 사용하며 Tag명이 부모 컴포넌트에서 <Tag>로 사용된다.
-파마리터 params는 "스토어에서 자식 컴포넌트로 보내는 props"다.
-정리하면, reducer에서 넘긴 state/action을 store를 통해 컨테이너 컴포넌트로 전달된다.

-바로위 각 파라미터가 선언된함수를가보면 리듀서에 선언된 함수와 state를 각각 인자로 가져와서 현재 컴포넌트의 함수에 넣어준다.
-현재 컴포넌트의 함수는 맨위에 선언되어있고 얘네는 render에서 호출된다.
-prop은 app.js에서 컨테이너. 그담 하위로 전달되고 실제액션은 맨 하위에서 보고 따라올라간다.


[실제 코딩]
" => { "는 function(){return}을 뜻한다.
" x=> ({x.y"는 x.y객체를 return해 x객체라고 한다.
"const {a} = this.props"은 const a= this.props.a와 같다.
"const {a,b} = this.props"처럼 여러개도 사용가능하다.

form, input, event : https://velopert.com/3634
onCreate: 버튼이 클릭 될 때 실행 될 함수
onChange: 인풋 내용이 변경 될 때 실행되는 함수
onSubmit: 제출 함수
코드 해설 : app.js에서 PhoneForm.js를 import한다. 두 js가 각각 render()가 이루어지고, 사용자가 input에 데이터를 입력하면 onChange에서 감지하여 handleChange를 호출한다.
              handleChange에는 this.setState가 있으므로 state를 갱신하는데 js의 이벤트 타겟(e.target.~)의 value를 state에 넣게된다. []는 키값의 형태로 변수를 쓰겠다는 뜻이된다.
	  그다음 submit 버튼을 누르면 onSubmit에 ㅇ의해 handleSubmit이 실행되고, e.preventDefault()로 페이지 갱신으로 인한 데이터 손실을 막는다.
	  그담 props를 부모로 전달해야하는데, this.props.onCreate(this.state)를 보면 현재 state들을 onCreate를 통해 부모로 보낸다.
	  실제로 app.js에 보면 onCreate가 있고, 여기서 {this.handleCreate}를 호출해서 넘겨받은 state를 console.log로 출력하게 된다.

[배열]
-불변성 유지 : state 내부의 값을 직접 수정하면 안된다. why ? 성능 최적화 때문.
 따라서 배열은 기존의 push,pop,splice(start, 삭제할갯수 n, 새로운삽입 n개),unshift(배열맨앞에삽입) 대신에 concat, slice, map, filter 함수를 써야한다.
-배열 생성
 arr.forEach(function(){}) arr배열의 '각 원소에' function을 실행시킨다.
 arr.forEach(인자 => arr2.push(인자)) //배열 복사
 arr2 = arr.map(number => number * 2);
 *map을 사용하기
  arr.map(function(){}) 메소드는, 해당 배열의 각 원소에 대해 함수를 실행한 후 배열을 반환한다.		
-배열은 컴포넌트 여러개를 렌더링 할 때 쓴다.
 배열을 만들때는 key값이 필요한데 일반적 방식으로 배열 인덱스를 key로 쓰면, 중간에 데이터를 삽입할때 뒤 데이터를 다 밀어줘야한다.
 하지만 key값을 미리 id 변수를 만들어 ++방식으로 props로 넘기면 고유의 값이 생겨 1,2,3,4중간에 데이터를 넣어도 1,2,5,3,4 처럼 key값은 정렬이 아니어도 데이터 삽입이 된다.
 *defaultProps : 데이터를 props로 넘겨야하는데 값이 없으면 깨지는 현상이 발생할 수 있으므로 기본적인 데이터를 넣어준다.
-배열 삭제
 arr.slice(0,2).concat(arr.sclice(3,5)) //0,1을 자른다음, 3,4를 자른것과 붙인다. arr[2] 제거
 *filter를 사용하기
 arr.filter(num => num != 2); //인자값이 2인 원소 배열을 반환한다.
-배열 수정
 *전개연산자 '...'
 ...arr 은 '나머지 매개변수'를 뜻한다. function(arr[0], arr[1], ...arr){} 이라고 하면 arr의 0,1번은 매개변수로 수동 매핑되고 나머지 들은 자동으로 매핑된다.
 당연히 function(...arr) 로 사용하면 배열의 모든 원소가 매핑된다.
 [...arr, 5, 6] 이라하면 1,2,3,4 가 자동으로 매핑된다.
 *componentDidUpdate(prevProps, prevState){ 수정 로직 }
  이전에 배운 리액트의 Lifecycle API에 보면, 렌더링이 끝난 직후에 저절로 호출되는 함수이다.

[라이프사이클 api]
컴포넌트 생성-> 완료
prop 변화 -> 업데이트 처리 -> 완료
state 변화 -> ↑
컴포넌트 제거
1. 컴포넌트 생성
	: constructor-> componentWillMount-> render
   완료
	: componentDidMount (렌더링 이후에 실행되는 메소드니, 이 안에 다른 JS프레임워크를 연동하거나 setTimeout, setInterval, Ajax 등을 넣는다)
2. prop 변화
	: componentWillReceiveProps-> shouldComponentUpdate->          componentWillUpdate-> render
	 (prop 별로 state를 업데이트)    (prop,state 변경시 리렌더링을 할지) (렌더링 전에 실행)
   완료
	: componentDidUpdate (리렌더링 이후에 실행)
3. state 변화
	: 바로 shouldComponentUpdate를 실행함
4 컴포넌트 제거
	: compoenetWillUnmount (컴포넌트가 DOM에서 사라진 후 실행)
*개발자 콘솔로 보면, 실제로 리랜더링이 매우 많이 일어남. 성능 최적화를 위해서 shouldComponentUpdate로 리렌더링들을 방지해줄 수 있다.

[비구조화 할당]
배열이나 객체의 속성을 해체하여 변수에 담는 표현식이다.
배열인 경우 let [a,b] = [10,20]; 혹은 let [a, ...rest] = [1,2,3,4,5] 처럼 쓴다.
객체를 담을때는 test{x:1, b:1} 이면 let {x,y} = test; 처럼 사용 가능하다.
({temp})={var.x.y}해서 temp.y 가능
또한, 컴포넌트를 전달하는데 쓸 수도 있다.
 (props) => {...} 로 prop을 넘기던 방식에서, 함수형 컴포넌트를 만들어 props대신 컴포넌트를 전달할 수 있다.
 const Temp = ({form, child}) => { return ( ...... <div> {form} </div><div> {child} </div>) };
 한번에 렌더팅해서 <div><form/><child/></div>해도 되지만 크기가 커졌을때 불리하다.
 *함수형 컴포넌트에서는 state를 쓸 수 없고, lifecycle이 없기 때문에 마운트가 매우조금 빠르다. 
  따라서 반복을 막기위해 api를 써야하는 경우(List나 동적으로 렌더링 되는 부분)는 클래스 컴포넌트로 만들어야한다.
  클래스 컴포넌트는 class A extends Component{} 형태이기 때문에 라이프사이클 api를 통해 최적화(리랜더링 방지)를 할 수 있다.
  todos.map(
      (todo) => (
        <TodoItem
          {...todo}
        />
      )
  );
  이렇게 써야할 내용을, 비구조화를 통해 객체 내부값에 따로 레퍼런스를 만들어줄 수 있다.
  const todoList = todos.map(
      ({id, text, checked}) => (
        <TodoItem
          id={id}
          text={text}
          checked={checked}
        />
      )
  );

[스타일링]
리액트에서는 class대신 className을 쓴다.
리액트에서는 css를 객체형태로 작성해준다.
css 클래스명 동적으로 바꾸기 : <div className={'test ${checked ? ' checked' : ''}'}> => 만약 변수 checked가 true면 className=test checked 이고, false면 className=test 가 된다.
e.stopPropagation() : 번식을 멈춘다는 뜻으로, div안의 div에서 onclick할때 부모 div의 onclick이 되지 작동되지 않게 한다.
arr.findIndex(function(){}) : 함수안의 조건을 만족하는 arr의 첫 번째 인덱스를 반환한다.

[리덕스]
컴포넌트들의 state를 부모를 거치지 않고, 외부에서 한다. 
유지보수에 효율이 오른다. depth 10의 컴포넌트의 업데이트가 생기면 부모,부모,부모 ... Root를 거쳐야 한다. 리덕스를 쓰면 1 depth만으로도 업데이트가 가능하다.
#원칙 : 1 app 1 store, 읽기전용(기존의 state건들지 않고 새로운 state를 생성해서 업데이트), 리듀서는 순수함수(같은 입력에 같은 결과를 반환한다 - random X, new date X)

#원리 : Redux Store생성-> A컴포넌트가 Store를 구독(subscribe())-> B컴포넌트에서 업데이트 발생(dispatch())-> action을 Store의 '리듀서'에 넘김(리듀서는 업데이트 로직을 수행하는 함수)-> 업데이트를 구독자에게 알림(listener())-> 다시 랜더링 됨
#1. 스토어생성
     const {createStore} = Redux;
     const store = createStore(액션을 넘겨받는 함수 A);
#2. 스토어 구독
     store.subscribe(render);
#3. 업데이트
     element.addEventListener(... store.dispatch(up)); //up액션이 A로 간다.
     //A내부에서 로직 수행 후 return state;
#4. const render = () => { //여기가 listener로써 업데이트가 완료되면 재 랜더링 되는 부분}

[라이브러리]
#prop-types
변수의 타입을 미리 체크해줄때 사용한다. 퍼포먼스 문제로 개발환경에서만 사용한다.
<h1>Hi, I am {this.props.name}</h1>
Greet.propTypes = {name : PropType.string};
